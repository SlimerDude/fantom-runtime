diff -r b5aed36081cf src/fwt/fan/Desktop.fan
--- a/src/fwt/fan/Desktop.fan	Wed Nov 17 19:21:45 2010 +0600
+++ b/src/fwt/fan/Desktop.fan	Tue Jan 25 18:41:38 2011 +0600
@@ -51,7 +51,7 @@
   ** on the UI thread, then it is ok for the function to be
   ** mutable.
   **
-  static native Void callAsync(|->| f)
+  static native Void callAsync(|->| f, Duration delay := 0ms)
 
 //////////////////////////////////////////////////////////////////////////
 // Dispose
diff -r b5aed36081cf src/fwt/fan/FwtEnv.fan
--- a/src/fwt/fan/FwtEnv.fan	Wed Nov 17 19:21:45 2010 +0600
+++ b/src/fwt/fan/FwtEnv.fan	Tue Jan 25 18:41:38 2011 +0600
@@ -23,5 +23,11 @@
   override native Int fontDescent(Font f)
   override native Int fontLeading(Font f)
   override native Int fontWidth(Font f, Str s)
+  override native Graphics getImageGraphics(Image image)
+  override native Image createImage(Size size)
+  override native Str? getFromClipboard()
+  override native Str? getFromSelectionClipboard()
+  override native Void copyToClipboard(Str text)
+  override native Void copyToSelectionClipboard(Str text)
 
 }
\ No newline at end of file
diff -r b5aed36081cf src/fwt/fan/Slider.fan
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/fwt/fan/Slider.fan	Tue Jan 25 18:41:38 2011 +0600
@@ -0,0 +1,70 @@
+//
+// Copyright (c) 2009, Brian Frank and Andy Frank
+// Licensed under the Academic Free License version 3.0
+//
+// History:
+//   16 Nov 10  Yuri Strot  Creation
+//
+
+using gfx
+
+**
+** 
+**
+@Js
+@Serializable
+class Slider : Widget
+{
+
+  **
+  ** Default constructor.
+  **
+  new make(|This|? f := null)
+  {
+    if (f != null) f(this)
+  }
+
+  **
+  ** Callback when scroll bar value is modified.
+  **
+  ** Event id fired:
+  **   - `EventId.modified`
+  **
+  ** Event fields:
+  **   - `Event.data`: new value of scroll bar
+  **
+  @Transient readonly EventListeners onModify := EventListeners()
+    { it.onModify = |->| { checkModifyListeners } }
+  internal native Void checkModifyListeners()
+
+  **
+  ** Horizontal or vertical.
+  **
+  const Orientation orientation := Orientation.vertical
+
+  **
+  ** The current value of the slider.
+  **
+  native Int val
+
+  **
+  ** The minimum value of the slider.
+  **
+  native Int min
+
+  **
+  ** The maximum value of the slider.
+  **
+  native Int max
+
+  **
+  ** The size of thumb relative to difference between min and max.
+  **
+  native Int thumb
+
+  **
+  ** Page increment size relative to difference between min and max.
+  **
+  native Int page
+
+}
\ No newline at end of file
diff -r b5aed36081cf src/fwt/java/CanvasPeer.java
--- a/src/fwt/java/CanvasPeer.java	Wed Nov 17 19:21:45 2010 +0600
+++ b/src/fwt/java/CanvasPeer.java	Tue Jan 25 18:41:38 2011 +0600
@@ -13,9 +13,10 @@
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.graphics.Rectangle;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.widgets.Widget;
+import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Canvas;
+import org.eclipse.swt.widgets.Composite;;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.events.*;
 
@@ -35,7 +36,7 @@
 
   public Widget create(Widget parent)
   {
-    Canvas c = new Canvas((Composite)parent, 0)
+    Canvas c = new Canvas((Composite)parent, SWT.NO_BACKGROUND)
     {
       public void drawBackground(GC gc, int x, int y, int w, int h) {}
     };
diff -r b5aed36081cf src/fwt/java/DesktopPeer.java
--- a/src/fwt/java/DesktopPeer.java	Wed Nov 17 19:21:45 2010 +0600
+++ b/src/fwt/java/DesktopPeer.java	Tue Jan 25 18:41:38 2011 +0600
@@ -63,6 +63,11 @@
 
   public static void callAsync(Func func)
   {
+	  callAsync(func, Duration.defVal);
+  }
+
+  public static void callAsync(Func func, Duration delay)
+  {
     // check if running on UI thread
     Fwt fwt = Fwt.main();
     if (java.lang.Thread.currentThread() != fwt.display.getThread())
@@ -70,7 +75,7 @@
 
     // enqueue on main UI thread's display
     final Func finalFunc = func;
-    fwt.display.asyncExec(new Runnable()
+    Runnable runnable = new Runnable()
     {
       public void run()
       {
@@ -83,7 +88,14 @@
           e.printStackTrace();
         }
       }
-    });
+    };
+    if (delay.ticks > 0)
+    {
+       fwt.display.timerExec((int)delay.millis(), runnable);
+    } else
+    {
+      fwt.display.asyncExec(runnable);
+    }
   }
 
 //////////////////////////////////////////////////////////////////////////
diff -r b5aed36081cf src/fwt/java/Fwt.java
--- a/src/fwt/java/Fwt.java	Wed Nov 17 19:21:45 2010 +0600
+++ b/src/fwt/java/Fwt.java	Tue Jan 25 18:41:38 2011 +0600
@@ -368,7 +368,7 @@
 // Fields
 //////////////////////////////////////////////////////////////////////////
 
-  Display display = Display.getCurrent() == null ? new Display() : Display.getCurrent(); // SWT display
+  Display display = Display.getDefault(); // SWT display
   HashMap colors = new HashMap();  // Int rgb   -> Color
   HashMap fonts = new HashMap();   // fwt::Font  -> Font
   HashMap images = new HashMap();  // Uri -> Image
diff -r b5aed36081cf src/fwt/java/FwtEnvPeer.java
--- a/src/fwt/java/FwtEnvPeer.java	Wed Nov 17 19:21:45 2010 +0600
+++ b/src/fwt/java/FwtEnvPeer.java	Tue Jan 25 18:41:38 2011 +0600
@@ -10,12 +10,17 @@
 import fan.sys.*;
 import fan.gfx.Size;
 import org.eclipse.swt.*;
+import org.eclipse.swt.dnd.Clipboard;
+import org.eclipse.swt.dnd.DND;
+import org.eclipse.swt.dnd.TextTransfer;
+import org.eclipse.swt.dnd.Transfer;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.FontData;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.ImageData;
 import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.widgets.Display;
 
 public class FwtEnvPeer
 {
@@ -114,4 +119,67 @@
     return gc;
   }
 
+  public fan.gfx.Image fontImage(FwtEnv self, fan.gfx.Font f, String s, fan.gfx.Color fg, fan.gfx.Color bg)
+  {
+    Fwt fwt = Fwt.get();
+    long width = fontWidth(self, f, s);
+    if (width == 0)
+	width = fontWidth(self, f, "?") * s.length();
+    Image img = new Image(fwt.display, (int)width, (int)fontHeight(self, f));
+    GC gc = new GC(img);
+    gc.setFont(fwt.font(f));
+    gc.setForeground(fwt.color(fg));
+    gc.setBackground(fwt.color(bg));
+    gc.drawText(s, 0, 0, SWT.DRAW_DELIMITER | SWT.DRAW_TAB);// | SWT.DRAW_TRANSPARENT);
+    Uri uri = Uri.fromStr("mem-" + Uuid.make());
+    fan.gfx.Image resultFan = fan.gfx.Image.makeUri(uri);
+    fwt.images.put(uri, img);
+    return resultFan;
+  }
+
+
+  public fan.gfx.Graphics getImageGraphics(FwtEnv self, fan.gfx.Image image) {
+    Fwt fwt = Fwt.get();
+    return new FwtGraphics(new GC(fwt.image(image)));
+  }
+
+  public fan.gfx.Image createImage(FwtEnv self, fan.gfx.Size size) {
+    Image img = new Image(display(), (int)size.w, (int)size.h);
+    Uri uri = Uri.fromStr("mem-" + Uuid.make());
+    fan.gfx.Image resultFan = fan.gfx.Image.makeUri(uri);
+    Fwt.get().images.put(uri, img);
+    return resultFan;
+  }
+
+  public String getFromClipboard(FwtEnv self) {
+    return (String) clipboard().getContents(TextTransfer.getInstance());
+  }
+
+  public String getFromSelectionClipboard(FwtEnv self) {
+    return (String) clipboard().getContents(TextTransfer.getInstance(), DND.SELECTION_CLIPBOARD);
+  }
+
+  public void copyToClipboard(FwtEnv self, String text) {
+    Transfer[] transfers = new Transfer[] { TextTransfer.getInstance() };
+    clipboard().setContents(new String[] { text }, transfers);
+  }
+
+  public void copyToSelectionClipboard(FwtEnv self, String text) {
+    Transfer[] transfers = new Transfer[] { TextTransfer.getInstance() };
+    clipboard().setContents(new String[] { text }, transfers, DND.SELECTION_CLIPBOARD);
+  }
+
+  private synchronized Clipboard clipboard() {
+	  if (clipboard == null) {
+		  clipboard = new Clipboard(display());
+	  }
+	  return clipboard;
+  }
+
+  private Clipboard clipboard;
+
+  private static Display display() {
+    return Fwt.get().display;
+  }
+
 }
\ No newline at end of file
diff -r b5aed36081cf src/fwt/java/SliderPeer.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/fwt/java/SliderPeer.java	Tue Jan 25 18:41:38 2011 +0600
@@ -0,0 +1,111 @@
+package fan.fwt;
+
+import fan.sys.*;
+import fan.gfx.Orientation;
+import org.eclipse.swt.*;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.swt.widgets.Slider;;
+import org.eclipse.swt.widgets.Widget;;
+import org.eclipse.swt.events.*;
+
+public class SliderPeer
+  extends WidgetPeer
+  implements SelectionListener
+{
+
+//////////////////////////////////////////////////////////////////////////
+// Construction
+//////////////////////////////////////////////////////////////////////////
+
+  public static SliderPeer make(fan.fwt.Slider self)
+    throws Exception
+  {
+    SliderPeer peer = new SliderPeer();
+    ((fan.fwt.Widget)self).peer = peer;
+    peer.self = self;
+    return peer;
+  }
+
+  public Widget create(Widget parent)
+  {
+    fan.fwt.Slider self = (fan.fwt.Slider)this.self;
+	int style = self.orientation == Orientation.horizontal ? SWT.HORIZONTAL : SWT.VERTICAL;
+    Slider c = new Slider((Composite)parent, style);
+    c.addSelectionListener(this);
+    this.control = c;
+    return c;
+  }
+
+//////////////////////////////////////////////////////////////////////////
+// Fields
+//////////////////////////////////////////////////////////////////////////
+
+  // Int val := 0
+  public long val(fan.fwt.Slider self) { return val.get(); }
+  public void val(fan.fwt.Slider self, long v) { val.set(v); }
+  public final Prop.IntProp val = new Prop.IntProp(this, 0)
+  {
+    public int get(Widget w) { return ((Slider)w).getSelection(); }
+    public void set(Widget w, int v) { ((Slider)w).setSelection(v); }
+  };
+
+  // Int min := 0
+  public long min(fan.fwt.Slider self) { return min.get(); }
+  public void min(fan.fwt.Slider self, long v) { min.set(v); }
+  public final Prop.IntProp min = new Prop.IntProp(this, 0)
+  {
+    public int get(Widget w) { return ((Slider)w).getMinimum(); }
+    public void set(Widget w, int v) { ((Slider)w).setMinimum(v); }
+  };
+
+  // Int max := 100
+  public long max(fan.fwt.Slider self) { return max.get(); }
+  public void max(fan.fwt.Slider self, long v) { max.set(v); }
+  public final Prop.IntProp max = new Prop.IntProp(this, 100)
+  {
+    public int get(Widget w) { return ((Slider)w).getMaximum(); }
+    public void set(Widget w, int v) { ((Slider)w).setMaximum(v); }
+  };
+
+  // Int thumb := 10
+  public long thumb(fan.fwt.Slider self) { return thumb.get(); }
+  public void thumb(fan.fwt.Slider self, long v) { thumb.set(v); }
+  public final Prop.IntProp thumb = new Prop.IntProp(this, 10)
+  {
+    public int get(Widget w) { return ((Slider)w).getThumb(); }
+    public void set(Widget w, int v) { ((Slider)w).setThumb(v); }
+  };
+
+  // Int page := 10
+  public long page(fan.fwt.Slider self) { return page.get(); }
+  public void page(fan.fwt.Slider self, long v) { page.set(v); }
+  public final Prop.IntProp page = new Prop.IntProp(this, 10)
+  {
+    public int get(Widget w) { return ((Slider)w).getPageIncrement(); }
+    public void set(Widget w, int v) { ((Slider)w).setPageIncrement(v); }
+  };
+
+//////////////////////////////////////////////////////////////////////////
+// Eventing
+//////////////////////////////////////////////////////////////////////////
+
+  public void widgetDefaultSelected(SelectionEvent se) {}
+
+  public void widgetSelected(SelectionEvent se)
+  {
+    fireModified();
+  }
+
+  public void fireModified()
+  {
+    Slider sb = (Slider)control;
+    fan.fwt.Event fe = event(EventId.modified);
+    fe.data = Long.valueOf(sb.getSelection());
+    ((fan.fwt.Slider)self).onModify().fire(fe);
+  }
+
+  public void checkModifyListeners(fan.fwt.Slider self)
+  {
+  }
+
+}
\ No newline at end of file
diff -r b5aed36081cf src/fwt/js/SliderPeer.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/fwt/js/SliderPeer.js	Tue Jan 25 18:41:38 2011 +0600
@@ -0,0 +1,5 @@
+/**
+ * SliderPeer.
+ */
+fan.fwt.SliderPeer = fan.sys.Obj.$extend(fan.fwt.WidgetPeer);
+fan.fwt.SliderPeer.prototype.$ctor = function(self) {}
diff -r b5aed36081cf src/gfx/fan/GfxEnv.fan
--- a/src/gfx/fan/GfxEnv.fan	Wed Nov 17 19:21:45 2010 +0600
+++ b/src/gfx/fan/GfxEnv.fan	Tue Jan 25 18:41:38 2011 +0600
@@ -85,5 +85,16 @@
   **
   abstract Int fontWidth(Font f, Str s)
 
+  abstract Graphics getImageGraphics(Image image)
+
+  abstract Image createImage(Size size)
+
+  abstract Str? getFromClipboard()
+
+  abstract Str? getFromSelectionClipboard()
+
+  abstract Void copyToClipboard(Str text)
+
+  abstract Void copyToSelectionClipboard(Str text)
 
 }
\ No newline at end of file
